---
- name: Ensure .ssh directory exists
  file:
    path: "{{ ansible_env.HOME }}/.ssh"
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: "0700"

- name: Check if ECDSA key exists
  stat:
    path: "{{ ansible_env.HOME }}/.ssh/id_ecdsa_github"
  register: key_stat

- name: Generate ECDSA SSH key pair for keyserver (if not exists)
  command: ssh-keygen -t ecdsa -b 521 -f "{{ ansible_env.HOME }}/.ssh/id_ecdsa_github" -N "" -C ""
  when: not key_stat.stat.exists

- name: Read generated public key
  command: "cat {{ ansible_env.HOME }}/.ssh/id_ecdsa_github.pub"
  register: public_key_output

- name: Print public key (copy this to GitHub as your deploy key)
  debug:
    msg: "Public key for GitHub: {{ public_key_output.stdout }}"

- name: Ensure directory for serving keys exists
  file:
    path: /var/www/keys
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: True

- name: Ensure directory for serving bootstrap script exists
  file:
    path: /var/www/html
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: True

- name: Copy bootstrap.sh to web server directory
  copy:
    src: "{{ playbook_dir }}/../bootstrap.sh"
    dest: /var/www/html/bootstrap.sh
    mode: "0755"
  become: True

- name: Copy generated SSH public key to serving directory
  copy:
    src: "{{ ansible_env.HOME }}/.ssh/id_ecdsa_github"
    dest: /var/www/keys/id_ecdsa_github
    mode: "0644"
  become: True

- name: Install Nginx on Debian/Ubuntu
  package:
    name: nginx
    state: present
  when: ansible_os_family == "Debian"
  become: True

- name: Install Nginx on RedHat/CentOS/Fedora
  package:
    name: nginx
    state: present
  when: ansible_os_family == "RedHat"
  become: True

- name: Configure Nginx to serve the key
  template:
    src: keyserver_nginx.conf.j2
    dest: /etc/nginx/conf.d/keyserver.conf
    mode: "0644"
  notify: Reload Nginx
  become: True

- name: Ensure Nginx is running and enabled
  service:
    name: nginx
    state: started
    enabled: True
  become: True

- name: Deploy rsyncd configuration
  template:
    src: rsyncd.conf.j2
    dest: /etc/rsyncd.conf
    mode: "0644"
  notify: Restart rsyncd
  become: True

- name: Start rsync daemon if not already running
  command: rsync --daemon
  args:
    creates: /var/run/rsyncd.pid
  become: True

- name: Debug rsync daemon status
  shell: ps aux | grep "[r]sync --daemon"
  register: rsync_status
  changed_when: false
  become: True

# Handlers
- name: Reload Nginx
  service:
    name: nginx
    state: reloaded
  become: True
