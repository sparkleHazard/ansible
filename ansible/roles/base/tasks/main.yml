---
# ansible/roles/base/tasks/main.yml

# Ensure rsync is installed for different operating systems.

- name: Ensure kitty-terminfo is installed on Debian/Ubuntu
  apt:
    name: kitty-terminfo
    state: present
  when: ansible_os_family == "Debian"
  become: True

- name: Ensure kitty-terminfo is installed on RedHat/CentOS
  yum:
    name: kitty-terminfo
    state: present
  when: ansible_os_family == "RedHat"
  become: True

- name: Ensure kitty-terminfo is installed on macOS
  homebrew:
    name: kitty-terminfo
    state: present
  when: ansible_os_family == "Darwin"

- name: Ensure rsync is installed on Debian/Ubuntu
  package:
    name: rsync
    state: present
  when: ansible_os_family == "Debian"
  become: True

- name: Ensure rsync is installed on RedHat/CentOS/Fedora
  package:
    name: rsync
    state: present
  when: ansible_os_family == "RedHat"
  become: True

- name: Ensure rsync is installed on macOS using Homebrew
  community.general.homebrew:
    name: rsync
    state: present
  when: ansible_os_family == "Darwin"

# Fallback for systems that are not Darwin or Linux (if needed)
- name: Update system packages on non-Homebrew systems
  package:
    name:
      - curl
      - git
      - vim
      - htop
    state: latest
  when: ansible_os_family not in ["Darwin", "Linux"]
  become: True

# Ensure zsh is installed

- name: Install zsh on Debian/Ubuntu
  package:
    name: zsh
    state: present
  when: ansible_os_family == "Debian"
  become: True

- name: Install zsh on RedHat/CentOS/Fedora
  package:
    name: zsh
    state: present
  when: ansible_os_family == "RedHat"
  become: True

- name: Install zsh on Darwin (macOS) using Homebrew
  community.general.homebrew:
    name: zsh
    state: present
  when: ansible_os_family == "Darwin"

# Set the default shell to zsh for the target user
#
# You can define a variable 'target_user' (for example, in host_vars or defaults)
# that specifies which user should have zsh as the default shell.
#
# Here, we use the ansible_env.USER variable if it's not root.
- name: Set default shell to zsh for target user
  user:
    name: "{{ target_user }}"
    shell: /bin/zsh
  vars:
    # If not defined elsewhere, default to ansible_env.USER
    target_user: "{{ (ansible_env.USER | default('')) | lower }}"
  when: target_user != 'root' and target_user != ""
  become: True

- name: Enable passwordless sudo for target user (if not root)
  copy:
    content: "{{ sudo_user }} ALL=(ALL) NOPASSWD: ALL"
    dest: "/etc/sudoers.d/{{ sudo_user }}"
    owner: root
    group: root
    mode: "0440"
  become: True
  when: sudo_user != ""

- name: Install qemu-guest-agent if running in a QEMU/KVM virtual machine
  package:
    name: qemu-guest-agent
    state: present
  when: (ansible_virtualization_role == "guest") and (ansible_virtualization_type in ["qemu", "kvm"])
  become: True

- name: Ensure /etc/cloud/cloud.cfg.d exists on Ubuntu
  become: True
  file:
    path: /etc/cloud/cloud.cfg.d
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: ansible_distribution == "Ubuntu"

- name: Disable cloud-init datasource on Ubuntu
  become: True
  copy:
    content: "datasource_list: [ None ]\n"
    dest: /etc/cloud/cloud.cfg.d/90_dpkg.cfg
    owner: root
    group: root
    mode: "0644"
    force: no
  when: ansible_distribution == "Ubuntu"

- name: Purge cloud-init package on Ubuntu
  become: True
  apt:
    name: cloud-init
    purge: True
    state: absent
    autoremove: True
  when: ansible_distribution == "Ubuntu"

- name: Remove /etc/cloud directory
  become: True
  file:
    path: /etc/cloud
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Remove /var/lib/cloud directory
  become: True
  file:
    path: /var/lib/cloud
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Disable iscsid service
  become: True
  systemd:
    name: iscsid.service
    enabled: no
    state: stopped

- name: Disable open-iscsi service
  become: True
  systemd:
    name: open-iscsi.service
    enabled: no
    state: stopped

# Ensure the default update-motd scripts have the desired permissions

- name: Set permissions on update-motd scripts
  become: True
  file:
    path: "{{ motd_script }}"
    mode: "0644"
  loop:
    - /etc/update-motd.d/10-help-text
    - /etc/update-motd.d/50-motd-news
    - /etc/update-motd.d/50-landscape-sysinfo
    - /etc/update-motd.d/85-fwupd
    - /etc/update-motd.d/90-updates-available
    - /etc/update-motd.d/91-contract-ua-esm-status
    - /etc/update-motd.d/91-release-upgrade
    - /etc/update-motd.d/92-unattended-upgrades
    - /etc/update-motd.d/95-hwe-eol
    - /etc/update-motd.d/95-hwe-eol
    - /etc/update-motd.d/97-overlayroot
    - /etc/update-motd.d/98-fsck-at-reboot
    - /etc/update-motd.d/98-reboot-required
  loop_control:
    loop_var: motd_script
  when: ansible_distribution == "Ubuntu"

# Install figlet so that it can be used to display the hostname
- name: Ensure figlet is installed
  become: True
  apt:
    name: figlet
    state: present
  when: ansible_distribution == "Ubuntu"

# Create a new update-motd script that displays the hostname using figlet
- name: Create /etc/update-motd.d/05-hostname to display hostname with figlet
  become: True
  copy:
    dest: /etc/update-motd.d/05-hostname
    content: |
      #!/bin/sh
      figlet -f slant {{ ansible_hostname }}
    owner: root
    group: root
    mode: "0755"
  when: ansible_distribution == "Ubuntu"
